# -*- mode: ruby -*-

CPP_COMPILER = "g++"
C_COMPILER = "gcc -std=c99"
GTEST_DIR = "gtest-1.7.0"
SRC_DIR = "../src"
LIB = ["libgtest.a", "libgtest_main.a"]

TYPES = [:bool, :cell, :continuation, :dummy, :env, :exception, :form,
         :integer, :lambda, :meta_object, :parameter, :prim_func, :special_form,
         :string, :symbol] + [:type]


# test targets
#--------------------

TESTS = {
  "sample" => ["sample.o"],

  "test_eval" => ["test_eval.o",
                  "../src/eval.o",
                  "../src/util.o",
                  *TYPES.map{|t| "../src/type/#{t}.o"},
                 ],

  "test_util" => ["test_util.o",
                  "../src/util.o",
                  "../src/type/meta_object.o",
                  "../src/type/cell.o",
                  "../src/type/symbol.o",
                  "../src/type/integer.o",
                  "../src/type/form.o",
                  "../src/type/parameter.o",
                  "../src/type/env.o",
                  "../src/type/type.o"],

  "test_special_forms" => ["test_special_forms.o",
                           "../src/special_forms.o",
                           "../src/eval.o",
                           "../src/util.o",
                           *TYPES.map{|t| "../src/type/#{t}.o"},
                          ],

  "test_prim_funcs" => ["test_prim_funcs.o",
                        "../src/prim_funcs.o",
                        "../src/eval.o",
                        "../src/util.o",
                        *TYPES.map{|t| "../src/type/#{t}.o"},
                       ],

  "type/test_integer" => ["type/test_integer.o",
                          "../src/type/meta_object.o",
                          "../src/type/integer.o",
                          "../src/type/symbol.o",
                          "../src/type/type.o"],

  "type/test_symbol" => ["type/test_symbol.o",
                         "../src/type/meta_object.o",
                         "../src/type/symbol.o",
                         "../src/type/type.o"],

  "type/test_string" => ["type/test_string.o",
                         "../src/type/meta_object.o",
                         "../src/type/symbol.o",
                         "../src/type/string.o",
                         "../src/type/type.o"],

  "type/test_exception" => ["type/test_exception.o",
                            "../src/type/meta_object.o",
                            "../src/type/symbol.o",
                            "../src/type/exception.o",
                            "../src/type/dummy.o",
                            "../src/type/type.o"],

  "type/test_cell" => ["type/test_cell.o",
                       "../src/type/meta_object.o",
                       "../src/type/symbol.o",
                       "../src/type/cell.o",
                       "../src/type/dummy.o",
                       "../src/type/type.o"],

  "type/test_form" => ["type/test_form.o",
                       "../src/util.o",
                       "../src/type/meta_object.o",
                       "../src/type/symbol.o",
                       "../src/type/form.o",
                       "../src/type/cell.o",
                       "../src/type/env.o",	
                       "../src/type/parameter.o",	
                       "../src/type/dummy.o",
                       "../src/type/type.o"],

  "type/test_continuation" => ["type/test_continuation.o",
                               "../src/type/meta_object.o",
                               "../src/type/symbol.o",
                               "../src/type/continuation.o",
                               "../src/type/form.o",
                               "../src/type/cell.o",
                               "../src/type/dummy.o",
                               "../src/type/type.o"],

  "type/test_lambda" => ["type/test_lambda.o",
                         "../src/type/meta_object.o",
                         "../src/type/symbol.o",
                         "../src/type/lambda.o",
                         "../src/type/dummy.o",
                         "../src/type/type.o"],

  "type/test_env" => ["type/test_env.o",
                      "../src/type/meta_object.o",
                      "../src/type/symbol.o",
                      "../src/type/env.o",
                      "../src/type/dummy.o",
                      "../src/type/type.o"],

  "type/test_parameter" => ["type/test_parameter.o",
                            "../src/type/meta_object.o",
                            "../src/type/symbol.o",
                            "../src/type/parameter.o",
                            "../src/type/dummy.o",
                            "../src/type/type.o"],
}

task :all => ["clean", *TESTS.keys]
task :default => "run"

task :run => "sample" do
  puts "---- run ----"
  sh "./sample.out"
end

task :clean do
  puts "---- clean ----"
  sh "rm -f ./*.a"
  sh "rm -f ./*.o ./type/*.o"
  sh "rm -f ./*.out ./type/*.out"
  sh "rm -f ../src/*.o ../src/type/*.o"
end

file "libgtest.a" do
  sh "#{CPP_COMPILER} -g -I./#{GTEST_DIR}/include -I./#{GTEST_DIR} -c ./#{GTEST_DIR}/src/gtest-all.cc"
  sh "ar -rv libgtest.a gtest-all.o"
  sh "rm gtest-all.o"
end

file "libgtest_main.a" do
  sh "#{CPP_COMPILER} -g -I./#{GTEST_DIR}/include -I./#{GTEST_DIR} -c ./#{GTEST_DIR}/src/gtest_main.cc"
  sh "ar -rv libgtest_main.a gtest_main.o"
  sh "rm gtest_main.o"
end

rule ".o" => ".cc" do |t|
  sh "#{CPP_COMPILER} -g -I#{GTEST_DIR}/include -I#{SRC_DIR} -c #{t.source} -o #{t.name}"
end

rule %r{^\.\.\/src\/((.+)\/)*(.+)\.o} => "%X.c" do |t|
  sh "#{C_COMPILER} -g -I#{GTEST_DIR}/include -I#{SRC_DIR} -c #{t.source} -o #{t.name}"
end

TESTS.each do |key, val|
  desc "run #{key} test"
  file key => [val, LIB].flatten do |t|
    sh "#{CPP_COMPILER} -g -pthread -o #{t.name}.out #{t.prerequisites.join(' ')}"
    sh "./#{t.name}.out"
  end
end

